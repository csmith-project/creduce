-*- mode: Text -*-

--------------------------------------------------------------------

C-Reduce

Before compiling C-Reduce yourself, you might want to see if your OS
comes with a precompiled package for C-Reduce. Ubuntu, Debian, Gentoo,
and Mac OS X (Homebrew) all do. For example, on OS X:

$ brew install creduce

--------------------------------------------------------------------
Prereqs:

C-Reduce is written in Python, C++, and C. To compile and run C-Reduce,
you will need a development environment that supports these languages.
C-Reduce's build system requires GNU Make (*not* BSD Make) or CMake.

Beyond the basic compile/build tools, C-Reduce depends on a set of
third-party software packages, including LLVM.

On Ubuntu or Mint, the prerequisites other than LLVM can be installed
like this:

  sudo apt-get install \
    python3 flex build-essential \
    zlib1g-dev

On OS X, Homebrew provides an easy and flexible way to get Python 3:

  brew install python3

On FreeBSD 10.2, the prerequisites can be installed like this:

  sudo pkg install \
    llvm39 \
    python3 \
    flex

Otherwise, install these packages either manually or using the package
manager:

Flex:
  http://flex.sourceforge.net/

LLVM/Clang 3.9.0:
  http://llvm.org/releases/download.html#3.9.0
  (No need to compile it: the appropriate "Clang binaries" package is
  all you need. If you use one of the binary packages, you may need to
  install additional packages that the binary package depends on. For
  example, the "Clang for x86_64 Ubuntu 14.04" binary package depends
  on "libtinfo5". You may need to install this, e.g.:
  "sudo apt-get install libtinfo-dev".)

zlib:
  http://www.zlib.net/

--------------------------------------------------------------------
Building and installing C-Reduce:

You can configure, build, and install C-Reduce with the provided
`configure' script or with CMake.

* Preface: If in Doubt, Compile With `clang++'

If you encounter weird C++ link-time errors while trying to compile
C-Reduce (in particular, while compiling its internal `clang_delta'
tool), please try compiling with `clang++'.

We have encountered link-time problems while trying to compile
C-Reduce with GCC 5.* and the precompiled LLVM binaries available
from <http://llvm.org/releases/download.html>. If you encounter
similar problems, we strongly suggest that you use Clang instead of
GCC to compile C-Reduce and its internal tools.

If you are curious, for some discussion of this issue, see:
<https://github.com/csmith-project/creduce/issues/101>
<https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html>

* The `configure' Way

From either the source directory or a build directory:

  [source-path/]configure [options]
  make
  make install

The `configure' script was generated by GNU Autoconf, and therefore
accepts the usual options for naming the installation directories,
choosing the compilers you want to use, and so on. `configure --help'
summarizes the command-line options.

If LLVM/Clang is not in your search path, you can tell the `configure'
script where to find LLVM/Clang:

  # Use the LLVM/Clang tree rooted at /opt/llvm
  configure --with-llvm=/opt/llvm

Note that assertions are enabled by default (which is probably what
you want). To disable assertions:

  configure --disable-trans-assert

The generated Makefiles require GNU Make. BSD Make will not work.
If you see weird make-time errors, please check that you are using
GNU Make.

* The CMake Way

From either the source directory or a build directory:

  cmake [source-dir] [options]
  make
  make install

If LLVM/Clang is not in your search path, you can tell CMake where to
find LLVM/Clang:

  # Use the LLVM/Clang tree rooted at /opt/llvm
  cmake [source-dir] -DCMAKE_PREFIX_PATH=/opt/llvm

Note that assertions are enabled by default (which is probably what
you want). To disable assertions:

  cmake ... -DENABLE_TRANS_ASSERT=OFF

--------------------------------------------------------------------
Regarding LLVM versions:

Released versions of C-Reduce, and also our master branch at GitHub,
need to be compiled against specific released versions of LLVM, as
noted in this file.

Our GitHub repo usually also has a branch called llvm-svn-compatible
that supports building C-Reduce against LLVMs that are newer than the
last released version. The most recent version of LLVM that the
llvm-svn-compatible branch is known to compile against is recorded in
LAST_KNOWN_WORKING_LLVM. C-Reduce may happen to also build against
revisions before or after this, but we make no guarantees.

--------------------------------------------------------------------
